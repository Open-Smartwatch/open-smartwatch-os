; PlatformIO Project Configuration File ;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = 3RD_PARTY_PAULS_WATCH_REV05_RGB

# ===========================================
# A note regarding the platform/library versions here:
# Due to potential upstream bugs, we pinned all versions to the latest known working version.
# While this will prevent the use of latest features, it will also prevent randomly breaking builds...
# ===========================================

[env]
platform = espressif32@6.8.1
; for USE_ULP: use a special branch and git submodule add https://github.com/boarchuz/HULP.git
; platform_packages =
;   framework-arduinoespressif32 @ https://github.com/marcovannoord/arduino-esp32.git#idf-release/v4.2
;   toolchain-xtensa32 @ ~2.80400.0
board = pico32
framework = arduino
board_build.partitions = min_spiffs.csv ; OTA updates (two app slots), but no space for the SPIFFS (as it is currently not used)
monitor_filters = esp32_exception_decoder ; Well, it works?!
lib_deps =
	adafruit/Adafruit Unified Sensor@1.1.14
	adafruit/Adafruit BusIO@1.16.1
	makuna/RTC@2.4.3
	bblanchon/ArduinoJson@6.21.5
	finitespace/BME280@3.0.0 ; TODO Use the more popular Adafruit BME280 Library instead (also true for others?)?
	mprograms/QMC5883LCompass@1.2.3
	h2zero/NimBLE-Arduino@^1.4.1
upload_speed = 460800
monitor_speed = 115200
; Define additional build stage scripts - used to "compile" the html or define additional information
extra_scripts =
	pre:scripts/build/prebuild_info.py
	pre:scripts/build/prebuild_assets.py
	pre:scripts/build/prebuild_cppflags.py
	pre:scripts/build/prebuild_lua.py ; Needed to generate the .cxx file(s), enabled via "OSW_FEATURE_LUA" build flag
build_unflags = -std=gnu++11 # The correct flag will be set by the cppflags python script...

# ===========================================
# A note regarding the environments here...
# If you add new ones, checkout `docs/support.md` and update the list there.
# If you wonder what flags are available, check the `docs/flags.md` file.
# ===========================================

[env:MINIMAL] ; For development only, the absolute minimal operating system
build_flags =
	-D OSW_TARGET_PLATFORM_HEADER='"platform/MINIMAL.h"'
build_type = debug

; Light edition by hardware revisions
; This revision did not change anything on hardware or software level, it just resized the pcb from V3_2
[env:LIGHT_EDITION_V3_3]
build_flags =
	-D OSW_TARGET_PLATFORM_HEADER='"platform/LIGHT_EDITION_V3_3.h"'
	-D OSW_FEATURE_STATS_STEPS
	-D OSW_SERVICE_CONSOLE
	-D OSW_FEATURE_WIFI
build_type = debug

[env:EXPERIMENTAL_LIGHT_EDITION_V4_0]
build_flags =
	-D OSW_TARGET_PLATFORM_HEADER='"platform/LIGHT_EDITION_V4_0.h"'
	-D OSW_FEATURE_STATS_STEPS
	-D OSW_SERVICE_CONSOLE
	-D OSW_FEATURE_WIFI
	-D OSW_FEATURE_WIFI_ONBOOT
build_type = debug

; Light edition other stuff
[env:EXPERIMENTAL_LIGHT_EDITION_V3_3_LUA]
build_flags =
	-D OSW_TARGET_PLATFORM_HEADER='"platform/LIGHT_EDITION_V3_3.h"'
	-D OSW_FEATURE_LUA
	-D OSW_SERVICE_CONSOLE
	-D OSW_FEATURE_WIFI
	-D LUA_C89_NUMBERS ; Required by OSW_FEATURE_LUA
	-Wdouble-promotion
extra_scripts =
	pre:scripts/build/prebuild_info.py
	pre:scripts/build/prebuild_assets.py
	pre:scripts/build/prebuild_cppflags.py
	pre:scripts/build/prebuild_lua.py ; Needed to generate the .cxx file(s)
build_type = debug

; GPS edition by hardware revisions
[env:EXPERIMENTAL_GPS_EDITION_V3_1]
build_flags =
	-D OSW_TARGET_PLATFORM_HEADER='"platform/GPS_EDITION_V3_1.h"'
	-D GPS_EDITION
	-D PROGMEM_TILES
	-D BOARD_HAS_PSRAM
	-mfix-esp32-psram-cache-issue
	-D OSW_FEATURE_STATS_STEPS
	-D OSW_SERVICE_CONSOLE
	-D OSW_FEATURE_WIFI
	-D OSW_FEATURE_WIFI_ONBOOT
build_type = debug

; GPS edition other stuff
[env:EXPERIMENTAL_GPS_EDITION_DEV_ROTATED]
build_flags =
	-D OSW_TARGET_PLATFORM_HEADER='"platform/GPS_EDITION_V3_1.h"'
	-D PROGMEM_TILES
	-D GPS_EDITION_ROTATED
	-D BOARD_HAS_PSRAM
	-mfix-esp32-psram-cache-issue
	-D OSW_FEATURE_STATS_STEPS
	-D OSW_SERVICE_CONSOLE
	-D OSW_FEATURE_WIFI
	-D OSW_FEATURE_WIFI_ONBOOT
build_type = debug

[env:3RD_PARTY_FLOW3R_C3CAMP_2023]
board = esp32-s3-devkitc-1
upload_speed = 921600 ; the usb-c is more stable, allowing faster speeds
build_flags =
	-D OSW_TARGET_PLATFORM_HEADER='"platform/FLOW3R_C3CAMP_2023.h"'
	-D OSW_SERVICE_CONSOLE
	-D OSW_FEATURE_WIFI
	-D OSW_FEATURE_WIFI_ONBOOT
build_type = debug

[env:3RD_PARTY_PAULS_WATCH_REV05_RGB]
build_flags =
	-D OSW_TARGET_PLATFORM_HEADER='"platform/PAULS_WATCH_REV05_RGB.h"'
	-D OSW_FEATURE_STATS_STEPS
	-D OSW_SERVICE_CONSOLE
	-D OSW_FEATURE_WIFI
	-D OSW_FEATURE_WIFI_ONBOOT
build_type = debug
